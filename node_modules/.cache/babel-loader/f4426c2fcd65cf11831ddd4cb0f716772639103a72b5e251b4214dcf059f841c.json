{"ast":null,"code":"var _jsxFileName = \"D:\\\\test-assignment\\\\src\\\\ProductList.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { gql } from 'apollo-boost';\nimport { List, Card } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_PRODUCTS = gql`\n  query GetProducts {\n    products {\n      id\n      name\n      stock\n      price\n    }\n  }\n`;\nfunction ProductList() {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PRODUCTS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(List, {\n    grid: {\n      gutter: 16,\n      column: 3\n    },\n    dataSource: data.products // Type assertion\n    ,\n    renderItem: product =>\n    /*#__PURE__*/\n    // Specify the type here\n    _jsxDEV(List.Item, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        title: product.name,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Stock: \", product.stock]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: $\", product.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n}\n_s(ProductList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = ProductList;\nexport default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useQuery","gql","List","Card","jsxDEV","_jsxDEV","GET_PRODUCTS","ProductList","_s","loading","error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","message","grid","gutter","column","dataSource","products","renderItem","product","Item","title","name","stock","price","_c","$RefreshReg$"],"sources":["D:/test-assignment/src/ProductList.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { gql } from 'apollo-boost';\r\nimport { List, Card } from 'antd';\r\n\r\ninterface Product {\r\n    id: string;\r\n    name: string;\r\n    stock: number;\r\n    price: number;\r\n  }\r\n  \r\n\r\nconst GET_PRODUCTS = gql`\r\n  query GetProducts {\r\n    products {\r\n      id\r\n      name\r\n      stock\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nfunction ProductList() {\r\n    const { loading, error, data } = useQuery(GET_PRODUCTS);\r\n  \r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error: {error.message}</p>;\r\n  \r\n    return (\r\n      <List\r\n        grid={{ gutter: 16, column: 3 }}\r\n        dataSource={data.products as Product[]} // Type assertion\r\n        renderItem={(product: Product) => ( // Specify the type here\r\n          <List.Item>\r\n            <Card title={product.name}>\r\n              <p>Stock: {product.stock}</p>\r\n              <p>Price: ${product.price}</p>\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n  \r\n  \r\n  export default ProductList;\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,GAAG,QAAQ,cAAc;AAClC,SAASC,IAAI,EAAEC,IAAI,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUlC,MAAMC,YAAY,GAAGL,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASM,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGX,QAAQ,CAACM,YAAY,CAAC;EAEvD,IAAIG,OAAO,EAAE,oBAAOJ,OAAA;IAAAO,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACrC,IAAIN,KAAK,EAAE,oBAAOL,OAAA;IAAAO,QAAA,GAAG,SAAO,EAACF,KAAK,CAACO,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAE/C,oBACEX,OAAA,CAACH,IAAI;IACHgB,IAAI,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAE,CAAE;IAChCC,UAAU,EAAEV,IAAI,CAACW,QAAsB,CAAC;IAAA;IACxCC,UAAU,EAAGC,OAAgB;IAAA;IAAO;IAClCnB,OAAA,CAACH,IAAI,CAACuB,IAAI;MAAAb,QAAA,eACRP,OAAA,CAACF,IAAI;QAACuB,KAAK,EAAEF,OAAO,CAACG,IAAK;QAAAf,QAAA,gBACxBP,OAAA;UAAAO,QAAA,GAAG,SAAO,EAACY,OAAO,CAACI,KAAK;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7BX,OAAA;UAAAO,QAAA,GAAG,UAAQ,EAACY,OAAO,CAACK,KAAK;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN;AAACR,EAAA,CApBMD,WAAW;EAAA,QACiBP,QAAQ;AAAA;AAAA8B,EAAA,GADpCvB,WAAW;AAuBlB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}